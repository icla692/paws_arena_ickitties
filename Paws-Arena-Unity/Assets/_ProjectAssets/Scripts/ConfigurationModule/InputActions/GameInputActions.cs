//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_ProjectAssets/Configurations/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""d77cec68-c50b-4445-b912-bfe59d88ebcd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""e51e4270-2af3-463f-a859-6d27457e5a71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dd036e28-b400-4ba9-8d19-22c0f6ce4a38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Approve"",
                    ""type"": ""Button"",
                    ""id"": ""0c52e6f5-7b0b-4b3b-97e5-0da5a30132b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Indicator"",
                    ""type"": ""Button"",
                    ""id"": ""cadd2cbc-d333-47ee-ad1d-103ea922ddde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""311c2286-aea7-4353-9b6b-ea586eacd3ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""705f3fd2-a5cc-439b-a73e-ce35da8c8282"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""A/D"",
                    ""id"": ""e548b0db-0e5b-4032-8ac8-c85b6984ada0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""74deb7f2-5754-40fe-86fc-949b361ac5f4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f59697be-80ce-4ad5-a2d3-715115238cab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left/Right arrows"",
                    ""id"": ""7f56a108-552f-47e9-8904-216c63c47f42"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""93a32a5e-6dd2-4235-a93b-4ba2d1bf0a9e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d786bce0-3472-4d72-8255-25e3957558b3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e22866b1-6dc0-4e17-b002-d1f178b4714d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Direction Up/Down"",
                    ""id"": ""34b927ee-2178-4ae0-8e0f-e50ea9d306f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Indicator"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""707f7725-5adf-41b3-bf84-1b005405aebb"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Indicator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5d792e8e-8200-42b7-8f75-63c1a4e178fd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Indicator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Direction W/S"",
                    ""id"": ""e3b1d946-c631-4ecb-8478-9bea6a4e7bae"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Indicator"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d049ebc3-5004-4e10-b9a5-9596a60949b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Indicator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""211046f7-0986-479c-84a2-788e9a77aa3c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Indicator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6a4f1ac5-62ff-467b-bb66-bc7cf049f667"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52bcb133-ab61-40d6-824f-4fb6eba800b1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d03cf36-9e8c-4229-9260-91c0854b13a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Approve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chat"",
            ""id"": ""9ef59c16-d0be-49ae-8034-2a413ae97f2e"",
            ""actions"": [
                {
                    ""name"": ""Send"",
                    ""type"": ""Button"",
                    ""id"": ""eca5e213-4ba9-4e58-8975-ac9037983470"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""6556e4b6-d7c1-4378-bfa4-0f76b3475b06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb8f489b-67c6-4f46-80f3-756e95f82f7f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Send"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""415a9621-5e35-4d7d-ae81-ea3010eea5d8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapons"",
            ""id"": ""11a82a8f-bcb9-491a-a93f-b49904ab62e6"",
            ""actions"": [
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""08f6a096-2c4f-4e3d-9691-f24064071b19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""538901f1-224c-493e-b883-b666a95f79b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Approve = m_Player.FindAction("Approve", throwIfNotFound: true);
        m_Player_Indicator = m_Player.FindAction("Indicator", throwIfNotFound: true);
        m_Player_Select = m_Player.FindAction("Select", throwIfNotFound: true);
        m_Player_ScreenPosition = m_Player.FindAction("ScreenPosition", throwIfNotFound: true);
        // Chat
        m_Chat = asset.FindActionMap("Chat", throwIfNotFound: true);
        m_Chat_Send = m_Chat.FindAction("Send", throwIfNotFound: true);
        m_Chat_Close = m_Chat.FindAction("Close", throwIfNotFound: true);
        // Weapons
        m_Weapons = asset.FindActionMap("Weapons", throwIfNotFound: true);
        m_Weapons_MainAction = m_Weapons.FindAction("MainAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Approve;
    private readonly InputAction m_Player_Indicator;
    private readonly InputAction m_Player_Select;
    private readonly InputAction m_Player_ScreenPosition;
    public struct PlayerActions
    {
        private @GameInputActions m_Wrapper;
        public PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Approve => m_Wrapper.m_Player_Approve;
        public InputAction @Indicator => m_Wrapper.m_Player_Indicator;
        public InputAction @Select => m_Wrapper.m_Player_Select;
        public InputAction @ScreenPosition => m_Wrapper.m_Player_ScreenPosition;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Approve.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnApprove;
                @Approve.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnApprove;
                @Approve.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnApprove;
                @Indicator.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnIndicator;
                @Indicator.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnIndicator;
                @Indicator.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnIndicator;
                @Select.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelect;
                @ScreenPosition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScreenPosition;
                @ScreenPosition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScreenPosition;
                @ScreenPosition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScreenPosition;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Approve.started += instance.OnApprove;
                @Approve.performed += instance.OnApprove;
                @Approve.canceled += instance.OnApprove;
                @Indicator.started += instance.OnIndicator;
                @Indicator.performed += instance.OnIndicator;
                @Indicator.canceled += instance.OnIndicator;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @ScreenPosition.started += instance.OnScreenPosition;
                @ScreenPosition.performed += instance.OnScreenPosition;
                @ScreenPosition.canceled += instance.OnScreenPosition;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Chat
    private readonly InputActionMap m_Chat;
    private IChatActions m_ChatActionsCallbackInterface;
    private readonly InputAction m_Chat_Send;
    private readonly InputAction m_Chat_Close;
    public struct ChatActions
    {
        private @GameInputActions m_Wrapper;
        public ChatActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Send => m_Wrapper.m_Chat_Send;
        public InputAction @Close => m_Wrapper.m_Chat_Close;
        public InputActionMap Get() { return m_Wrapper.m_Chat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatActions set) { return set.Get(); }
        public void SetCallbacks(IChatActions instance)
        {
            if (m_Wrapper.m_ChatActionsCallbackInterface != null)
            {
                @Send.started -= m_Wrapper.m_ChatActionsCallbackInterface.OnSend;
                @Send.performed -= m_Wrapper.m_ChatActionsCallbackInterface.OnSend;
                @Send.canceled -= m_Wrapper.m_ChatActionsCallbackInterface.OnSend;
                @Close.started -= m_Wrapper.m_ChatActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_ChatActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_ChatActionsCallbackInterface.OnClose;
            }
            m_Wrapper.m_ChatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Send.started += instance.OnSend;
                @Send.performed += instance.OnSend;
                @Send.canceled += instance.OnSend;
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
            }
        }
    }
    public ChatActions @Chat => new ChatActions(this);

    // Weapons
    private readonly InputActionMap m_Weapons;
    private IWeaponsActions m_WeaponsActionsCallbackInterface;
    private readonly InputAction m_Weapons_MainAction;
    public struct WeaponsActions
    {
        private @GameInputActions m_Wrapper;
        public WeaponsActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainAction => m_Wrapper.m_Weapons_MainAction;
        public InputActionMap Get() { return m_Wrapper.m_Weapons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsActions set) { return set.Get(); }
        public void SetCallbacks(IWeaponsActions instance)
        {
            if (m_Wrapper.m_WeaponsActionsCallbackInterface != null)
            {
                @MainAction.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainAction;
                @MainAction.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainAction;
                @MainAction.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnMainAction;
            }
            m_Wrapper.m_WeaponsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainAction.started += instance.OnMainAction;
                @MainAction.performed += instance.OnMainAction;
                @MainAction.canceled += instance.OnMainAction;
            }
        }
    }
    public WeaponsActions @Weapons => new WeaponsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnApprove(InputAction.CallbackContext context);
        void OnIndicator(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnScreenPosition(InputAction.CallbackContext context);
    }
    public interface IChatActions
    {
        void OnSend(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
    }
    public interface IWeaponsActions
    {
        void OnMainAction(InputAction.CallbackContext context);
    }
}
